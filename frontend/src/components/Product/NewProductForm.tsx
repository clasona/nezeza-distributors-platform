'use client';

import { generateSlug } from '@/lib/generateSlug';
import { updateOrderItem } from '@/utils/order/updateOrderItem';
import { createProduct } from '@/utils/product/createProduct';
import { getSingleProduct } from '@/utils/product/getSingleProduct';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useSelector } from 'react-redux';
import { OrderItemsProps, ProductProps, stateProps } from '../../../type';
import ErrorMessageModal from '../ErrorMessageModal';
import CloudinaryImageUpload from '../FormInputs/CloudinaryImageUpload';
import DropdownInput from '../FormInputs/DropdownInput';
import MultiImageInput from '../FormInputs/MultipleImageInput';
import SubmitButton from '../FormInputs/SubmitButton';
import TextAreaInput from '../FormInputs/TextAreaInput';
import TextInput from '../FormInputs/TextInput';
import SuccessMessageModal from '../SuccessMessageModal';

interface NewProductFormProps {
  onSubmitSuccess?: (data: any) => void; // Callback after successful submission
}
const NewProductForm: React.FC<NewProductFormProps> = ({ onSubmitSuccess }) => {
  const router = useRouter();
  const [productData, setProductData] = useState<ProductProps | null>(null);
  const [successMessage, setSuccessMessage] = useState<string>('');
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [mainImageResource, setMainImageResource] = useState<any>(null);
  const [imagePreviewUrl, setImagePreviewUrl] = useState(null);

  //must match with what's defined in backedn Product model
  const categoryOptions = [
    { value: '', label: 'Select a category' },
    { value: 'food', label: 'Food' },
    { value: 'electronics', label: 'Electronics' },
    { value: 'clothing', label: 'Clothing' },
    { value: 'furniture', label: 'Furniture' },
    { value: 'others', label: 'Others' },
  ];
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm();
  const [imageUrl, setImageUrl] = useState('');
  const [additionalImages, setAdditionalImages] = useState<File[]>([]);

  const { userInfo, storeInfo } = useSelector(
    (state: stateProps) => state.next
  );

  useEffect(() => {
    const queryProductId = router.query._id;

    if (queryProductId) {
      const fetchProductData = async () => {
        try {
          const data = await getSingleProduct(queryProductId); // Await the promise
          setProductData(data); // Set the fetched data

          // Set form values after data is fetched.  Check if data exists.
          if (data) {
            for (const key in data) {
              if (data.hasOwnProperty(key)) {
                try {
                  if (key === 'quantity') {
                    setValue(key, router.query.quantity); // setting the quantity to ordered product quantity
                  } else {
                    setValue(key, data[key]);
                  }
                } catch (error) {
                  console.warn(`Error setting value for ${key}:`, error);
                }
              }
            }
            if (data.image) {
              setMainImageResource({ url: data.image });
              setImagePreviewUrl(data.image);
            }
          } else {
            console.error('No data returned from getSingleProduct function.');
            // Handle the case where no data is returned (e.g., show an error message)
          }
        } catch (error) {
          console.error('Error fetching product data:', error);
          // Handle the error (e.g., display an error message)
        }
      };

      fetchProductData();
    }
  }, [router.query, setValue]);

  const onSubmit = async (data: any) => {
    const slug = generateSlug(data.title);
    data.slug = slug;

    // Ensure mainImageResource exists before submitting
    if (!mainImageResource) {
      setErrorMessage('Please upload a main image before submitting.');
      alert('Please upload a main product image before submitting');
      return; // Prevent form submission
    }

    // Prepare image URLs (main image and additional images)
    const productData = {
      ...data,
      // imageUrl, // Main product image URL
      image: mainImageResource?.secure_url, // Main product image URL
      // createdAt: new Date().toISOString(),
      // updatedAt: new Date().toISOString(),
      owner: storeInfo._id,
      buyerStoreId: storeInfo._id,
      sellerStoreId: storeInfo._id,
      productId: storeInfo._id,
      // additionalImages: additionalImages.map((file) =>
      //   URL.createObjectURL(file)
      // ), // Placeholder URLs for additional images
    };
    delete productData._id; // Delete the _id property since a new one will be generated by mongoDB

    try {
      const response = await createProduct(productData);
      //update to addedToInventoty= true so ordered item cant be added/updated twice
      const orderItemData: Partial<OrderItemsProps> = {
        addedToInventory: true,
      };
      if (router.query.order_id && router.query.order_item_id) {
        await updateOrderItem(
          router.query.order_id.toString(),
          router.query.order_item_id.toString(),
          orderItemData
        );
      }
      setErrorMessage('');
      setSuccessMessage('Product created successfully.');
      setTimeout(() => setSuccessMessage(''), 4000);

      // TODO: Reset form inputs
      setMainImageResource(null);

      if (onSubmitSuccess) {
        onSubmitSuccess(response.data); // Call the callback with the response data
      }
    } catch (error) {
      setErrorMessage('Error creating product.');
    }
  };

  // if (!productData) {
  //   // Conditionally render while data is loading
  //   return <div>Loading product data...</div>; // Or a loading spinner
  // }

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className='w-full max-w-4xl p-4 bg-nezeza_light_blue border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 mx-auto my-2'
    >
      <div className='grid grid-cols-1 gap-y-2 sm:grid-cols-2 sm:gap-x-6'>
        {/* 
        title, price,  description, image, category, colors, featured,
        weight, height, freeshipping, availability, quantity, avergaerating, 
        numOfReviews, storeId */}
        <TextInput
          label='Product Title'
          id='title'
          name='title'
          register={register}
          errors={errors}
          type='text'
        />
        <DropdownInput
          label='Category'
          id='category'
          name='category'
          options={categoryOptions}
          register={register}
          errors={errors}
        />
        <TextAreaInput
          label='Product Description'
          id='description'
          name='description'
          register={register}
          errors={errors}
          className='sm:col-span-2' //span full row
        />
        <TextInput
          label='Quantity'
          id='quantity'
          name='quantity'
          register={register}
          errors={errors}
          type='number'
        />
        <TextInput
          label='Unit Price'
          id='price'
          name='price'
          register={register}
          errors={errors}
          type='number'
        />

        {/* Main product image */}
        <CloudinaryImageUpload
          label='Main Product Image'
          className='sm:col-span-2' //span full row
          onResourceChange={setMainImageResource} // Set mainImageResource on upload success
        />
        {/* Image Preview (Small Circle) */}
        {imagePreviewUrl && (
          <div className='mt-2'>
            {' '}
            {/* Add some margin top */}
            <div className='overflow-hidden w-16 h-16 border border-gray-300'>
              {' '}
              {/* Circle styles */}
              <img
                src={imagePreviewUrl}
                alt={imagePreviewUrl}
                className='w-full h-full object-cover'
              />
            </div>
          </div>
        )}

        {/* upload more product images  */}
        <div className='col-span-2'>
          <label className='mb-2 font-medium text-gray-700'>
            Additional Product Images
          </label>
          <MultiImageInput onFilesChange={setAdditionalImages} />
        </div>
      </div>
      <div className='flex items-center justify-center'>
        {successMessage && (
          <SuccessMessageModal successMessage={successMessage} />
        )}
        {errorMessage && <ErrorMessageModal errorMessage={errorMessage} />}
        {/* {errorMessage && <p className='text-red-600'>{errorMessage}</p>} */}
        <SubmitButton
          isLoading={false}
          buttonTitle='Create Product'
          loadingButtonTitle='Creating inventory product...'
        />
      </div>
    </form>
  );
};

export default NewProductForm;
